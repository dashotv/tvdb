// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/dashotv/tvdb/openapi/models/shared"
)

type UpdatesAction string

const (
	UpdatesActionDelete UpdatesAction = "delete"
	UpdatesActionUpdate UpdatesAction = "update"
)

func (e UpdatesAction) ToPointer() *UpdatesAction {
	return &e
}

func (e *UpdatesAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delete":
		fallthrough
	case "update":
		*e = UpdatesAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatesAction: %v", v)
	}
}

type UpdatesType string

const (
	UpdatesTypeArtwork              UpdatesType = "artwork"
	UpdatesTypeAwardNominees        UpdatesType = "award_nominees"
	UpdatesTypeCompanies            UpdatesType = "companies"
	UpdatesTypeEpisodes             UpdatesType = "episodes"
	UpdatesTypeLists                UpdatesType = "lists"
	UpdatesTypePeople               UpdatesType = "people"
	UpdatesTypeSeasons              UpdatesType = "seasons"
	UpdatesTypeSeries               UpdatesType = "series"
	UpdatesTypeSeriespeople         UpdatesType = "seriespeople"
	UpdatesTypeArtworktypes         UpdatesType = "artworktypes"
	UpdatesTypeAwardCategories      UpdatesType = "award_categories"
	UpdatesTypeAwards               UpdatesType = "awards"
	UpdatesTypeCompanyTypes         UpdatesType = "company_types"
	UpdatesTypeContentRatings       UpdatesType = "content_ratings"
	UpdatesTypeCountries            UpdatesType = "countries"
	UpdatesTypeEntityTypes          UpdatesType = "entity_types"
	UpdatesTypeGenres               UpdatesType = "genres"
	UpdatesTypeLanguages            UpdatesType = "languages"
	UpdatesTypeMovies               UpdatesType = "movies"
	UpdatesTypeMovieGenres          UpdatesType = "movie_genres"
	UpdatesTypeMovieStatus          UpdatesType = "movie_status"
	UpdatesTypePeopletypes          UpdatesType = "peopletypes"
	UpdatesTypeSeasontypes          UpdatesType = "seasontypes"
	UpdatesTypeSourcetypes          UpdatesType = "sourcetypes"
	UpdatesTypeTagOptions           UpdatesType = "tag_options"
	UpdatesTypeTags                 UpdatesType = "tags"
	UpdatesTypeTranslatedcharacters UpdatesType = "translatedcharacters"
	UpdatesTypeTranslatedcompanies  UpdatesType = "translatedcompanies"
	UpdatesTypeTranslatedepisodes   UpdatesType = "translatedepisodes"
	UpdatesTypeTranslatedlists      UpdatesType = "translatedlists"
	UpdatesTypeTranslatedmovies     UpdatesType = "translatedmovies"
	UpdatesTypeTranslatedpeople     UpdatesType = "translatedpeople"
	UpdatesTypeTranslatedseasons    UpdatesType = "translatedseasons"
	UpdatesTypeTranslatedserierk    UpdatesType = "translatedserierk"
)

func (e UpdatesType) ToPointer() *UpdatesType {
	return &e
}

func (e *UpdatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "artwork":
		fallthrough
	case "award_nominees":
		fallthrough
	case "companies":
		fallthrough
	case "episodes":
		fallthrough
	case "lists":
		fallthrough
	case "people":
		fallthrough
	case "seasons":
		fallthrough
	case "series":
		fallthrough
	case "seriespeople":
		fallthrough
	case "artworktypes":
		fallthrough
	case "award_categories":
		fallthrough
	case "awards":
		fallthrough
	case "company_types":
		fallthrough
	case "content_ratings":
		fallthrough
	case "countries":
		fallthrough
	case "entity_types":
		fallthrough
	case "genres":
		fallthrough
	case "languages":
		fallthrough
	case "movies":
		fallthrough
	case "movie_genres":
		fallthrough
	case "movie_status":
		fallthrough
	case "peopletypes":
		fallthrough
	case "seasontypes":
		fallthrough
	case "sourcetypes":
		fallthrough
	case "tag_options":
		fallthrough
	case "tags":
		fallthrough
	case "translatedcharacters":
		fallthrough
	case "translatedcompanies":
		fallthrough
	case "translatedepisodes":
		fallthrough
	case "translatedlists":
		fallthrough
	case "translatedmovies":
		fallthrough
	case "translatedpeople":
		fallthrough
	case "translatedseasons":
		fallthrough
	case "translatedserierk":
		*e = UpdatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatesType: %v", v)
	}
}

type UpdatesRequest struct {
	Since  float64        `queryParam:"style=form,explode=true,name=since"`
	Action *UpdatesAction `queryParam:"style=form,explode=true,name=action"`
	// name
	Page *float64     `queryParam:"style=form,explode=true,name=page"`
	Type *UpdatesType `queryParam:"style=form,explode=true,name=type"`
}

func (o *UpdatesRequest) GetSince() float64 {
	if o == nil {
		return 0.0
	}
	return o.Since
}

func (o *UpdatesRequest) GetAction() *UpdatesAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *UpdatesRequest) GetPage() *float64 {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *UpdatesRequest) GetType() *UpdatesType {
	if o == nil {
		return nil
	}
	return o.Type
}

// Updates200ApplicationJSON - response
type Updates200ApplicationJSON struct {
	Data []shared.EntityUpdate `json:"data,omitempty"`
	// Links for next, previous and current record
	Links  *shared.Links `json:"links,omitempty"`
	Status *string       `json:"status,omitempty"`
}

func (o *Updates200ApplicationJSON) GetData() []shared.EntityUpdate {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *Updates200ApplicationJSON) GetLinks() *shared.Links {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *Updates200ApplicationJSON) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

type UpdatesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// response
	Updates200ApplicationJSONObject *Updates200ApplicationJSON
}

func (o *UpdatesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdatesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdatesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdatesResponse) GetUpdates200ApplicationJSONObject() *Updates200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.Updates200ApplicationJSONObject
}
