// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/dashotv/tvdb/openapi/models/shared"
)

// QueryParamSort - sort by results
type QueryParamSort string

const (
	QueryParamSortScore      QueryParamSort = "score"
	QueryParamSortFirstAired QueryParamSort = "firstAired"
	QueryParamSortLastAired  QueryParamSort = "lastAired"
	QueryParamSortName       QueryParamSort = "name"
)

func (e QueryParamSort) ToPointer() *QueryParamSort {
	return &e
}
func (e *QueryParamSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "score":
		fallthrough
	case "firstAired":
		fallthrough
	case "lastAired":
		fallthrough
	case "name":
		*e = QueryParamSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSort: %v", v)
	}
}

// SortType - sort type ascending or descending
type SortType string

const (
	SortTypeAsc  SortType = "asc"
	SortTypeDesc SortType = "desc"
)

func (e SortType) ToPointer() *SortType {
	return &e
}
func (e *SortType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SortType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SortType: %v", v)
	}
}

type GetSeriesFilterRequest struct {
	// production company
	Company *float64 `queryParam:"style=form,explode=true,name=company"`
	// content rating id base on a country
	ContentRating *float64 `queryParam:"style=form,explode=true,name=contentRating"`
	// country of origin
	Country string `queryParam:"style=form,explode=true,name=country"`
	// Genre id. This id can be found using **/genres** endpoint.
	Genre *float64 `queryParam:"style=form,explode=true,name=genre"`
	// original language
	Lang string `queryParam:"style=form,explode=true,name=lang"`
	// sort by results
	Sort *QueryParamSort `queryParam:"style=form,explode=true,name=sort"`
	// sort type ascending or descending
	SortType *SortType `queryParam:"style=form,explode=true,name=sortType"`
	// status
	Status *float64 `queryParam:"style=form,explode=true,name=status"`
	// release year
	Year *float64 `queryParam:"style=form,explode=true,name=year"`
}

func (o *GetSeriesFilterRequest) GetCompany() *float64 {
	if o == nil {
		return nil
	}
	return o.Company
}

func (o *GetSeriesFilterRequest) GetContentRating() *float64 {
	if o == nil {
		return nil
	}
	return o.ContentRating
}

func (o *GetSeriesFilterRequest) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *GetSeriesFilterRequest) GetGenre() *float64 {
	if o == nil {
		return nil
	}
	return o.Genre
}

func (o *GetSeriesFilterRequest) GetLang() string {
	if o == nil {
		return ""
	}
	return o.Lang
}

func (o *GetSeriesFilterRequest) GetSort() *QueryParamSort {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *GetSeriesFilterRequest) GetSortType() *SortType {
	if o == nil {
		return nil
	}
	return o.SortType
}

func (o *GetSeriesFilterRequest) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSeriesFilterRequest) GetYear() *float64 {
	if o == nil {
		return nil
	}
	return o.Year
}

// GetSeriesFilterResponseBody - response
type GetSeriesFilterResponseBody struct {
	Data []shared.SeriesBaseRecord `json:"data,omitempty"`
}

func (o *GetSeriesFilterResponseBody) GetData() []shared.SeriesBaseRecord {
	if o == nil {
		return nil
	}
	return o.Data
}

type GetSeriesFilterResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// response
	Object *GetSeriesFilterResponseBody
}

func (o *GetSeriesFilterResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSeriesFilterResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSeriesFilterResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSeriesFilterResponse) GetObject() *GetSeriesFilterResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
