// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"

	"github.com/dashotv/tvdb/openapi/models/shared"
)

type GetSearchResultsRequest struct {
	// Restrict results to a specific company (original network, production company, studio, etc).  As an example, "The Walking Dead" would have companies of "AMC", "AMC+", and "Disney+".
	Company *string `queryParam:"style=form,explode=true,name=company"`
	// Restrict results to a specific country of origin. Should contain a 3 character country code. Currently only used for series and movies.
	Country *string `queryParam:"style=form,explode=true,name=country"`
	// Restrict results to a specific director.  Generally only used for movies.  Should include the full name of the director, such as "Steven Spielberg".
	Director *string `queryParam:"style=form,explode=true,name=director"`
	// Restrict results to a specific primary language.  Should include the 3 character language code.  Currently only used for series and movies.
	Language *string `queryParam:"style=form,explode=true,name=language"`
	// Limit results.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Restrict results to a specific network.  Used for TV and TV movies, and functions the same as the company parameter with more specificity.
	Network *string `queryParam:"style=form,explode=true,name=network"`
	// Offset results.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Restrict results to a specific type of company.  Should include the full name of the type of company, such as "Production Company".  Only used for companies.
	PrimaryType *string `queryParam:"style=form,explode=true,name=primaryType"`
	// Alias of the "query" parameter.  Recommend using query instead as this field will eventually be deprecated.
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// The primary search string, which can include the main title for a record including all translations and aliases.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example.
	RemoteID *string `queryParam:"style=form,explode=true,name=remote_id"`
	// Restrict results to a specific entity type.  Can be movie, series, person, or company.
	Type *string `queryParam:"style=form,explode=true,name=type"`
	// Restrict results to a specific year. Currently only used for series and movies.
	Year *int64 `queryParam:"style=form,explode=true,name=year"`
}

func (o *GetSearchResultsRequest) GetCompany() *string {
	if o == nil {
		return nil
	}
	return o.Company
}

func (o *GetSearchResultsRequest) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *GetSearchResultsRequest) GetDirector() *string {
	if o == nil {
		return nil
	}
	return o.Director
}

func (o *GetSearchResultsRequest) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *GetSearchResultsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetSearchResultsRequest) GetNetwork() *string {
	if o == nil {
		return nil
	}
	return o.Network
}

func (o *GetSearchResultsRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetSearchResultsRequest) GetPrimaryType() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryType
}

func (o *GetSearchResultsRequest) GetQ() *string {
	if o == nil {
		return nil
	}
	return o.Q
}

func (o *GetSearchResultsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetSearchResultsRequest) GetRemoteID() *string {
	if o == nil {
		return nil
	}
	return o.RemoteID
}

func (o *GetSearchResultsRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetSearchResultsRequest) GetYear() *int64 {
	if o == nil {
		return nil
	}
	return o.Year
}

// GetSearchResultsResponseBody - response
type GetSearchResultsResponseBody struct {
	Data []shared.SearchResult `json:"data,omitempty"`
	// Links for next, previous and current record
	Links  *shared.Links `json:"links,omitempty"`
	Status *string       `json:"status,omitempty"`
}

func (o *GetSearchResultsResponseBody) GetData() []shared.SearchResult {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetSearchResultsResponseBody) GetLinks() *shared.Links {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *GetSearchResultsResponseBody) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetSearchResultsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// response
	Object *GetSearchResultsResponseBody
}

func (o *GetSearchResultsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSearchResultsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSearchResultsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSearchResultsResponse) GetObject() *GetSearchResultsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
